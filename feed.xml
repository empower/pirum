<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="http://empower.github.com/pirum/">
    <title>Empower Campaign's PEAR channel Latest Releases</title>
    <link href="http://empower.github.com/pirum/" />
    <author>
        <name>http://empower.github.com/pirum/</name>
    </author>

    <entry>
        <title>Deneb 0.9.0 (alpha)</title>
        <link href="http://empower.github.com/pirum//get/Deneb-0.9.0.tgz" />
        <id>Deneb-0.9.0</id>
        <author>
            <name>shupp</name>
        </author>
        <updated>2011-08-02T23:29:36-07:00</updated>
        <content>
            Deneb provides a consistent CRUD interface to using Zend_Db base models and model collections, as well as segregated read and write DB pools and selectors
        </content>
    </entry>    <entry>
        <title>Deneb 0.8.1 (alpha)</title>
        <link href="http://empower.github.com/pirum//get/Deneb-0.8.1.tgz" />
        <id>Deneb-0.8.1</id>
        <author>
            <name>shupp</name>
        </author>
        <updated>2011-07-18T21:40:46-07:00</updated>
        <content>
            Deneb provides a consistent CRUD interface to using Zend_Db base models and model collections, as well as segregated read and write DB pools and selectors
        </content>
    </entry>    <entry>
        <title>Deneb 0.8.0 (alpha)</title>
        <link href="http://empower.github.com/pirum//get/Deneb-0.8.0.tgz" />
        <id>Deneb-0.8.0</id>
        <author>
            <name>shupp</name>
        </author>
        <updated>2011-05-12T10:14:28-07:00</updated>
        <content>
            Deneb provides a consistent CRUD interface to using Zend_Db base models and model collections, as well as segregated read and write DB pools and selectors
        </content>
    </entry>    <entry>
        <title>Deneb 0.7.2 (alpha)</title>
        <link href="http://empower.github.com/pirum//get/Deneb-0.7.2.tgz" />
        <id>Deneb-0.7.2</id>
        <author>
            <name>shupp</name>
        </author>
        <updated>2011-04-27T14:31:50-07:00</updated>
        <content>
            Deneb provides a consistent CRUD interface to using Zend_Db base models and model collections, as well as segregated read and write DB pools and selectors
        </content>
    </entry>    <entry>
        <title>Deneb 0.7.1 (alpha)</title>
        <link href="http://empower.github.com/pirum//get/Deneb-0.7.1.tgz" />
        <id>Deneb-0.7.1</id>
        <author>
            <name>shupp</name>
        </author>
        <updated>2011-04-04T14:28:39-07:00</updated>
        <content>
            Deneb provides a consistent CRUD interface to using Zend_Db base models and model collections, as well as segregated read and write DB pools and selectors
        </content>
    </entry>    <entry>
        <title>Deneb 0.7.0 (alpha)</title>
        <link href="http://empower.github.com/pirum//get/Deneb-0.7.0.tgz" />
        <id>Deneb-0.7.0</id>
        <author>
            <name>shupp</name>
        </author>
        <updated>2011-04-03T16:34:35-07:00</updated>
        <content>
            Deneb provides a consistent CRUD interface to using Zend_Db base models and model collections, as well as segregated read and write DB pools and selectors
        </content>
    </entry>    <entry>
        <title>Deneb 0.6.2 (alpha)</title>
        <link href="http://empower.github.com/pirum//get/Deneb-0.6.2.tgz" />
        <id>Deneb-0.6.2</id>
        <author>
            <name>shupp</name>
        </author>
        <updated>2011-03-08T09:42:37-08:00</updated>
        <content>
            Deneb provides a consistent CRUD interface to using Zend_Db base models and model collections, as well as segregated read and write DB pools and selectors
        </content>
    </entry>    <entry>
        <title>Deneb 0.6.1 (alpha)</title>
        <link href="http://empower.github.com/pirum//get/Deneb-0.6.1.tgz" />
        <id>Deneb-0.6.1</id>
        <author>
            <name>shupp</name>
        </author>
        <updated>2011-02-27T12:09:00-08:00</updated>
        <content>
            Deneb provides a consistent CRUD interface to using Zend_Db base models and model collections, as well as segregated read and write DB pools and selectors
        </content>
    </entry>    <entry>
        <title>Deneb 0.6.0 (alpha)</title>
        <link href="http://empower.github.com/pirum//get/Deneb-0.6.0.tgz" />
        <id>Deneb-0.6.0</id>
        <author>
            <name>shupp</name>
        </author>
        <updated>2011-02-12T10:29:31-08:00</updated>
        <content>
            Deneb provides a consistent CRUD interface to using Zend_Db base models and model collections, as well as segregated read and write DB pools and selectors
        </content>
    </entry>    <entry>
        <title>Deneb 0.5.0 (alpha)</title>
        <link href="http://empower.github.com/pirum//get/Deneb-0.5.0.tgz" />
        <id>Deneb-0.5.0</id>
        <author>
            <name>shupp</name>
        </author>
        <updated>2011-02-02T12:43:46-08:00</updated>
        <content>
            Deneb provides a consistent CRUD interface to using Zend_Db base models and model collections, as well as segregated read and write DB pools and selectors
        </content>
    </entry>    <entry>
        <title>EC_Cache 0.1.2 (alpha)</title>
        <link href="http://empower.github.com/pirum//get/EC_Cache-0.1.2.tgz" />
        <id>EC_Cache-0.1.2</id>
        <author>
            <name>shupp</name>
        </author>
        <updated>2011-07-18T21:47:22-07:00</updated>
        <content>
            Supports loadMulti() and saveMulti() interface.  And with the mock backend, all items are stored in the backend instance (memory).  Allows for proper mocking.
        </content>
    </entry>    <entry>
        <title>EC_Cache 0.1.1 (alpha)</title>
        <link href="http://empower.github.com/pirum//get/EC_Cache-0.1.1.tgz" />
        <id>EC_Cache-0.1.1</id>
        <author>
            <name>shupp</name>
        </author>
        <updated>2011-05-12T11:04:06-07:00</updated>
        <content>
            Supports loadMulti() and saveMulti() interface.  And with the mock backend, all items are stored in the backend instance (memory).  Allows for proper mocking.
        </content>
    </entry>    <entry>
        <title>EC_Cache 0.1.0 (alpha)</title>
        <link href="http://empower.github.com/pirum//get/EC_Cache-0.1.0.tgz" />
        <id>EC_Cache-0.1.0</id>
        <author>
            <name>shupp</name>
        </author>
        <updated>2011-05-10T19:03:03-07:00</updated>
        <content>
            Supports loadMulti() and saveMulti() interface.  And with the mock backend, all items are stored in the backend instance (memory).  Allows for proper mocking.
        </content>
    </entry>    <entry>
        <title>EC_XHProf 0.2.0 (alpha)</title>
        <link href="http://empower.github.com/pirum//get/EC_XHProf-0.2.0.tgz" />
        <id>EC_XHProf-0.2.0</id>
        <author>
            <name>shupp</name>
        </author>
        <updated>2011-06-06T17:06:39-07:00</updated>
        <content>
            EC_XHProf is a simple class for managing XHProf runs and storing them according
to virtual host ServerNames.  You can also clear out runs.  See the examples
directory for examples.
        </content>
    </entry>    <entry>
        <title>EC_XHProf 0.1.0 (alpha)</title>
        <link href="http://empower.github.com/pirum//get/EC_XHProf-0.1.0.tgz" />
        <id>EC_XHProf-0.1.0</id>
        <author>
            <name>shupp</name>
        </author>
        <updated>2011-02-27T13:13:33-08:00</updated>
        <content>
            EC_XHProf is a simple class for managing XHProf runs and storing them according
to virtual host ServerNames.  You can also clear out runs.  See the examples
directory for examples.
        </content>
    </entry>    <entry>
        <title>Noginn_RateLimit 0.1.0 (alpha)</title>
        <link href="http://empower.github.com/pirum//get/Noginn_RateLimit-0.1.0.tgz" />
        <id>Noginn_RateLimit-0.1.0</id>
        <author>
            <name>shupp</name>
        </author>
        <updated>2011-02-27T14:04:42-08:00</updated>
        <content>
            This is the empower fork of the project
        </content>
    </entry>    <entry>
        <title>PHP_CodeSniffer_Standards_EC 0.4.0 (alpha)</title>
        <link href="http://empower.github.com/pirum//get/PHP_CodeSniffer_Standards_EC-0.4.0.tgz" />
        <id>PHP_CodeSniffer_Standards_EC-0.4.0</id>
        <author>
            <name>shupp</name>
        </author>
        <updated>2011-08-08T17:03:42-07:00</updated>
        <content>
            The PHP_CodeSniffer implementation of the EC coding standard
        </content>
    </entry>    <entry>
        <title>PHP_CodeSniffer_Standards_EC 0.3.0 (alpha)</title>
        <link href="http://empower.github.com/pirum//get/PHP_CodeSniffer_Standards_EC-0.3.0.tgz" />
        <id>PHP_CodeSniffer_Standards_EC-0.3.0</id>
        <author>
            <name>shupp</name>
        </author>
        <updated>2011-02-27T14:44:00-08:00</updated>
        <content>
            The PHP_CodeSniffer implementation of the EC coding standard
        </content>
    </entry>    <entry>
        <title>ZendX 0.2.1 (alpha)</title>
        <link href="http://empower.github.com/pirum//get/ZendX-0.2.1.tgz" />
        <id>ZendX-0.2.1</id>
        <author>
            <name>shupp</name>
        </author>
        <updated>2011-07-18T21:50:13-07:00</updated>
        <content>
            This is a set of libraries outside of ZendFramework, in the ZendX namespace.  Includes ZendX_JQuery
        </content>
    </entry>    <entry>
        <title>ZendX 0.2.0 (alpha)</title>
        <link href="http://empower.github.com/pirum//get/ZendX-0.2.0.tgz" />
        <id>ZendX-0.2.0</id>
        <author>
            <name>shupp</name>
        </author>
        <updated>2011-02-27T14:21:13-08:00</updated>
        <content>
            This is a set of libraries outside of ZendFramework, in the ZendX namespace.  Includes ZendX_JQuery
        </content>
    </entry>    <entry>
        <title>Zend_Cache_Backend_Mock 0.1.0 (alpha)</title>
        <link href="http://empower.github.com/pirum//get/Zend_Cache_Backend_Mock-0.1.0.tgz" />
        <id>Zend_Cache_Backend_Mock-0.1.0</id>
        <author>
            <name>shupp</name>
        </author>
        <updated>2011-02-02T12:22:51-08:00</updated>
        <content>
            All items are stored in the backend instance (memory).  Allows for proper mocking.
        </content>
    </entry>
</feed>